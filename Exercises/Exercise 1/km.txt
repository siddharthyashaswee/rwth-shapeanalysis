## K-Means
For k-means you are required to implement the `assign` and the `update` methods. 
Each cluster is represented as a dictionary with 2 keywords, namely `mean` (which holds the corresponding 2D mean vector for each cluster) and `indices` (which is a list of indices of data points assigned to the cluster). 



[
{'mean': array([7.3184519 , 1.66972495]), 'indices': []}, 
{'mean': array([9.07198584, 0.84089945]), 'indices': []}, 
{'mean': array([ 8.2634157 , 10.34723435]), 'indices': []}
]

[
{'mean': array([7.3184519 , 1.66972495]), 'indices': []}, 
{'mean': array([9.07198584, 0.84089945]), 'indices': []}, 
{'mean': array([ 8.2634157 , 10.34723435]), 'indices': []}
]

The `run` method alternates between calling the `assign` and the `update` functions and stops once the maximum number of iterations is reached or the quality of the clustering hasn't changed. In the `assign` method you should compute the new `indices` for each cluster. In `update` you have to compute the new `mean` for each cluster.

In order to debug your implementation it is helpful to use `plot_clusters` to visualize the current state. The means are displayed as crosses and if the list in `indices` isn't empty you will see points visualized in different colors according to their assignment to the various clusters.